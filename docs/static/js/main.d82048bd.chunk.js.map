{"version":3,"sources":["App.tsx","useTSIChartComponentRender.ts","mockData.ts","reportWebVitals.ts","index.tsx"],"names":["ImportType","useGuid","useState","s4","Math","floor","random","toString","substring","createGUID","useTSIChartComponentRender","component","params","chartContainerGUID","chart","useRef","useEffect","current","document","getElementById","render","defaultSearchSpan","from","to","bucketSize","bucketSizeMillis","this","Utils","parseTimeInput","Date","valueOf","generateMockLineChartData","searchSpan","properties","data","ceil","i","length","lines","push","j","values","k","val","temp","toISOString","avg","App","client","TsiClient","direct","importType","setImportType","toMillis","fromMillis","dateTimePickerGuid","umd","ux","DateTimePicker","theme","offset","pieChartGuid","PieChart","scatterplotGuid","ScatterPlot","spMeasures","barchartGuid","BarChart","GroupedBarChart","linechartGuid","LineChart","availabilityChartGuid","AvailabilityChart","availabilityCount","legend","color","brushMoveEndAction","isCompact","range","intervalSize","sliderGuid","Slider","label","action","throttleSlider","singleDateTimePickerGuid","SingleDateTimePicker","heatmapData","heatmapGuid","Heatmap","map","d","measureTypes","eventsTableGuid","EventsTable","now","getMilliseconds","dateTimeButtonSingleGuid","DateTimeButtonSingle","dateLocale","dateTimeButtonRangeGuid","DateTimeButtonRange","colorPickerGuid","ColorPicker","className","onClick","prevImportType","id","style","position","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.d82048bd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n// UMD import\nimport TsiClient from 'tsiclient';\n\n// Direct imports\nimport LineChart from 'tsiclient/LineChart';\nimport AvailabilityChart from 'tsiclient/AvailabilityChart';\nimport PieChart from 'tsiclient/PieChart';\nimport ScatterPlot from 'tsiclient/ScatterPlot';\nimport GroupedBarChart from 'tsiclient/GroupedBarChart';\nimport Slider from 'tsiclient/Slider';\nimport Heatmap from 'tsiclient/Heatmap';\nimport EventsTable from 'tsiclient/EventsTable';\nimport DateTimePicker from 'tsiclient/DateTimePicker';\nimport SingleDateTimePicker from 'tsiclient/SingleDateTimePicker';\nimport DateTimeButtonSingle from 'tsiclient/DateTimeButtonSingle';\nimport DateTimeButtonRange from 'tsiclient/DateTimeButtonRange';\nimport ColorPicker from 'tsiclient/ColorPicker';\n\nimport 'tsiclient/tsiclient.css';\nimport useTSIChartComponentRender from './useTSIChartComponentRender';\nimport generateMockLineChartData, { defaultSearchSpan } from './mockData';\n\nenum ImportType {\n    direct,\n    umd\n}\n\nfunction App() {\n    const client = new TsiClient();\n    const [importType, setImportType] = useState(ImportType.direct);\n\n    // DateTimePicker\n    const toMillis = 1567904097008; // 17:54 Pacific\n    const fromMillis = toMillis - 1000 * 60 * 60 * 24 * 10;\n    const dateTimePickerGuid = useTSIChartComponentRender(\n        importType === ImportType.umd\n            ? client.ux.DateTimePicker\n            : DateTimePicker,\n        [\n            { theme: 'light', offset: 'Local' },\n            0,\n            toMillis,\n            fromMillis,\n            toMillis,\n            () => null,\n            () => null\n        ]\n    );\n\n    // PieChart\n    const pieChartGuid = useTSIChartComponentRender(\n        importType === ImportType.umd ? client.ux.PieChart : PieChart,\n        [generateMockLineChartData()]\n    );\n\n    // Scatterplot\n    const scatterplotGuid = useTSIChartComponentRender(\n        importType === ImportType.umd ? client.ux.ScatterPlot : ScatterPlot,\n        [generateMockLineChartData(), { spMeasures: ['avg', 'temp'] }]\n    );\n\n    // Barchart\n    const barchartGuid = useTSIChartComponentRender(\n        importType === ImportType.umd ? client.ux.BarChart : GroupedBarChart,\n        [generateMockLineChartData()]\n    );\n\n    // Linechart\n    const linechartGuid = useTSIChartComponentRender(\n        importType === ImportType.umd ? client.ux.LineChart : LineChart,\n        [generateMockLineChartData(), {}]\n    );\n\n    // Availability chart\n    const from = new Date();\n    const availabilityChartGuid = useTSIChartComponentRender(\n        importType === ImportType.umd\n            ? client.ux.AvailabilityChart\n            : AvailabilityChart,\n        [\n            [{ availabilityCount: { '': {} } }],\n            {\n                legend: 'hidden',\n                theme: 'light',\n                color: 'purple',\n                brushMoveEndAction: () => null,\n                offset: 'Local',\n                isCompact: false\n            },\n            {\n                range: {\n                    from: from.toISOString(),\n                    to: new Date(\n                        from.valueOf() + 1000 * 60 * 60 * 60\n                    ).toISOString()\n                },\n                intervalSize: '1h'\n            }\n        ]\n    );\n\n    // Slider\n    const sliderGuid = useTSIChartComponentRender(\n        importType === ImportType.umd ? client.ux.Slider : Slider,\n        [\n            [\n                { label: 'a', action: () => null },\n                { label: 'b', action: () => null }\n            ],\n            { theme: 'light', throttleSlider: true },\n            300,\n            '2m'\n        ]\n    );\n\n    // Single DateTimePicker\n    const singleDateTimePickerGuid = useTSIChartComponentRender(\n        importType === ImportType.umd\n            ? client.ux.SingleDateTimePicker\n            : SingleDateTimePicker,\n        [\n            { theme: 'light', offset: 'Local' },\n            0,\n            toMillis,\n            fromMillis,\n            () => null,\n            () => null\n        ]\n    );\n\n    // Heatmap\n    const heatmapData = generateMockLineChartData();\n    const heatmapGuid = useTSIChartComponentRender(\n        importType === ImportType.umd ? client.ux.Heatmap : Heatmap,\n        [\n            heatmapData,\n            {},\n            heatmapData.map((d) => {\n                return {\n                    measureTypes: ['avg', 'temp'],\n                    searchSpan: {\n                        from: defaultSearchSpan.from.toISOString(),\n                        to: defaultSearchSpan.to.toISOString(),\n                        bucketSize: defaultSearchSpan.bucketSize\n                    }\n                };\n            })\n        ]\n    );\n\n    // Events table\n    const eventsTableGuid = useTSIChartComponentRender(\n        importType === ImportType.umd ? client.ux.EventsTable : EventsTable,\n        [generateMockLineChartData(), {}]\n    );\n\n    // DateTime Button Single\n    const now = new Date().getMilliseconds();\n    const dateTimeButtonSingleGuid = useTSIChartComponentRender(\n        importType === ImportType.umd\n            ? client.ux.DateTimeButtonSingle\n            : DateTimeButtonSingle,\n        [\n            { offset: 'Local', theme: 'dark', dateLocale: 'es' },\n            now - 1000 * 60 * 60 * 1000,\n            now,\n            now - 24 * 60 * 60 * 1000,\n            () => {}\n        ]\n    );\n\n    // Datetime button range\n    const dateTimeButtonRangeGuid = useTSIChartComponentRender(\n        importType === ImportType.umd\n            ? client.ux.DateTimeButtonRange\n            : DateTimeButtonRange,\n        [\n            { offset: 'Local', theme: 'light' },\n            now - 1000 * 60 * 60 * 1000,\n            now,\n            now - 24 * 60 * 60 * 1000,\n            now - 1 * 60 * 60 * 1000,\n            () => {},\n            () => {}\n        ]\n    );\n\n    // Color picker\n    const colorPickerGuid = useTSIChartComponentRender(\n        importType === ImportType.umd ? client.ux.ColorPicker : ColorPicker,\n        []\n    );\n\n    return (\n        <div className=\"App\">\n            <h1>Choose import type</h1>\n            <button\n                onClick={() =>\n                    setImportType((prevImportType) =>\n                        prevImportType === ImportType.umd\n                            ? ImportType.direct\n                            : ImportType.umd\n                    )\n                }\n            >\n                Change import type\n            </button>\n            <h3>\n                Current type:{' '}\n                {importType === ImportType.umd ? 'UMD' : 'Direct imports'}\n            </h3>\n            <h1>Date time picker</h1>\n            <div id={dateTimePickerGuid} style={{ position: 'relative' }}></div>\n\n            <h1>Piechart</h1>\n            <div id={pieChartGuid}></div>\n\n            <h1>Scatterplot</h1>\n            <div id={scatterplotGuid}></div>\n\n            <h1>Barchart</h1>\n            <div id={barchartGuid}></div>\n\n            <h1>Linechart</h1>\n            <div id={linechartGuid}></div>\n\n            <h1>Availability chart</h1>\n            <div id={availabilityChartGuid}></div>\n\n            <h1>Slider</h1>\n            <div id={sliderGuid}></div>\n\n            <h1>Single date time picker</h1>\n            <div id={singleDateTimePickerGuid}></div>\n\n            <h1>Heatmap</h1>\n            <div id={heatmapGuid}></div>\n\n            <h1>Events table</h1>\n            <div id={eventsTableGuid}></div>\n\n            <h1>Date time button single</h1>\n            <div\n                id={dateTimeButtonSingleGuid}\n                style={{ position: 'relative' }}\n            ></div>\n\n            <h1>Date time button range</h1>\n            <div\n                id={dateTimeButtonRangeGuid}\n                style={{ position: 'relative' }}\n            ></div>\n\n            <h1>Color picker</h1>\n            <div id={colorPickerGuid}></div>\n        </div>\n    );\n}\n\nexport default App;\n","import { useEffect, useRef, useState } from 'react';\n\nconst createGUID = () => {\n    const s4 = () => {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    };\n    return `${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n};\n\nconst useGuid = () => {\n    const [guid] = useState(createGUID());\n    return guid;\n};\n\nconst useTSIChartComponentRender = (component, params: any[]) => {\n    const chartContainerGUID = useGuid();\n    const chart = useRef(null);\n\n    useEffect(() => {\n        if (chart.current === null) {\n            chart.current = new component(\n                document.getElementById(chartContainerGUID)\n            );\n        }\n        //@ts-ignore\n        chart.current.render(...params);\n    }, [component, params]);\n\n    return chartContainerGUID;\n};\n\nexport default useTSIChartComponentRender;\n","import Utils from 'tsiclient/Utils';\r\n\r\nclass SearchSpan {\r\n    public from: Date;\r\n    public to: Date;\r\n    public bucketSize: string;\r\n    public bucketSizeMillis: number;\r\n\r\n    constructor(from: Date, to: Date, bucketSize: string = null) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.bucketSize = bucketSize;\r\n        if (bucketSize) {\r\n            this.bucketSizeMillis = Utils.parseTimeInput(bucketSize);\r\n        }\r\n    }\r\n}\r\n\r\nexport const defaultSearchSpan = new SearchSpan(\r\n    new Date(),\r\n    new Date(new Date().valueOf() + 100000),\r\n    '100ms'\r\n);\r\n\r\nconst generateMockLineChartData = (\r\n    searchSpan: SearchSpan = defaultSearchSpan,\r\n    properties: string[] = ['foo', 'bar', 'baz']\r\n) => {\r\n    const data = [];\r\n    const from = searchSpan.from;\r\n    const to = searchSpan.to;\r\n    const bucketSizeMillis =\r\n        searchSpan.bucketSizeMillis ||\r\n        Math.ceil((to.valueOf() - from.valueOf()) / 100);\r\n    for (let i = 0; i < properties.length; i++) {\r\n        const lines = {};\r\n        data.push({ [properties[i]]: lines });\r\n        for (let j = 0; j < 1; j++) {\r\n            const values = {};\r\n            lines[''] = values;\r\n            for (let k = 0; k < 60; k++) {\r\n                if (!(k % 2 && k % 3)) {\r\n                    // if check is to create some sparseness in the data\r\n                    const to = new Date(from.valueOf() + bucketSizeMillis * k);\r\n                    const val = Math.random();\r\n                    const temp = Math.random();\r\n                    values[to.toISOString()] = { avg: val, temp };\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return data;\r\n};\r\n\r\nexport default generateMockLineChartData;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}